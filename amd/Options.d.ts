import ClassNames from './ClassNames';
import Day from './Day';
import Translator from './Translator';
import { Align, DayOfWeek, Position } from './Helper';
export declare enum EventType_ {
    BeforeSelect = "beforeSelect",
    Select = "select",
    BeforeOpen = "beforeOpen",
    Open = "open",
    BeforeClose = "beforeClose",
    Close = "close",
    BeforeMonthChange = "beforeMonthChange",
    MonthChange = "monthChange",
    Focus = "focus",
    BeforeFocus = "beforeFocus"
}
export declare class AvailableDateNotFoundException {
}
export type SelectListener = (event: Event | null, day: Day | null, previousDay: Day | null) => boolean;
export type OpenOrCloseListener = (event: Event | null) => boolean;
export type MonthChangeListener = (event: Event | null, month: Date, previousMonth: Date) => boolean;
export type FocusListener = (event: Event | null, day: Day | null, previousDay: Day | null) => boolean;
type ListenerCaller = (listener: (event: Event | null, ...props: any) => boolean) => boolean;
export type DateAvailabilityResolver = (date: Date) => boolean;
export type CellContentResolver = (day: Day) => string;
export type StructureResolverInit = () => HTMLElement;
export type CellContentStructureResolverUpdate = (element: HTMLElement, day: Day) => void;
export interface CellContentStructureResolver {
    init: StructureResolverInit;
    update: CellContentStructureResolverUpdate;
}
export type CellClassesResolver = (day: Day) => string[];
export type DayModifier = (day: Day) => void;
export default class Options {
    readonly translator: Translator;
    readonly classNames: ClassNames;
    private hideOnBlur_;
    private hideOnSelect_;
    private minDate_;
    private maxDate_;
    private initialDate_;
    private initialMonth_;
    private initialDatePriority_;
    private firstDayOfWeek_;
    private dateAvailabilityResolvers_;
    private cellContentResolver_;
    private cellContentStructureResolver_;
    private headerStructureResolver_;
    private footerStructureResolver_;
    private cellClassesResolvers_;
    private dayModifiers_;
    private inputFormat_;
    private allowInputAnyChar_;
    private daysOutOfMonthVisible_;
    private fixedRowsCount_;
    private toggleSelection_;
    private allowEmpty_;
    private showDeselectButton_;
    private showResetButton_;
    private monthAsDropdown_;
    private yearAsDropdown_;
    private bindSelectedDateWithMonth_;
    private yearSelectedFromTableOfYears_;
    private tableOfYearsRowsCount_;
    private tableOfYearsAlign_;
    private tableOfYearsOnSwipeDown_;
    private yearsOutOfTableOfYearsVisible_;
    private monthAndYearSeparated_;
    private monthShort_;
    private changeMonthOnSwipe_;
    private slideAnimation_;
    private classesPrefix_;
    private darkMode_;
    private showCloseButton_;
    private closeOnEscPress_;
    private title_;
    private dropdownItemsLimit_;
    private hideDropdownWithOneItem_;
    private goBackHtml_;
    private goForwardHtml_;
    private closeHtml_;
    private resetHtml_;
    private deselectHtml_;
    private position_;
    private positionFixing_;
    private fullScreenOnMobile_;
    private keyboardOnMobile_;
    private includeAria_;
    private today_;
    private listeners_;
    constructor(translator?: Translator | null, classNames?: ClassNames | null);
    clone(): Options;
    setHideOnBlur(value: boolean): void;
    setHideOnSelect(value: boolean): void;
    setMinDate(date: Day | Date | string | null): void;
    setMaxDate(date: Day | Date | string | null): void;
    setInitialMonth(month: Date | string | null): void;
    setInitialDate(value: Day | Date | string | null): void;
    setInitialDatePriority(value: boolean): void;
    setFirstDayOfWeek(dayOfWeek: DayOfWeek): void;
    setDateAvailabilityResolver(resolver: DateAvailabilityResolver | null): void;
    addDateAvailabilityResolver(resolver: DateAvailabilityResolver): void;
    removeDateAvailabilityResolver(resolver?: DateAvailabilityResolver | null): void;
    setCellContentResolver(resolver: CellContentResolver | null): void;
    setCellContentStructureResolver(init: StructureResolverInit | null, update?: CellContentStructureResolverUpdate | null): void;
    setHeaderStructureResolver(resolver: StructureResolverInit | null): void;
    setFooterStructureResolver(resolver: StructureResolverInit | null): void;
    addCellClassesResolver(resolver: CellClassesResolver): void;
    removeCellClassesResolver(resolver?: CellClassesResolver | null): void;
    addDayModifier(modifier: DayModifier): void;
    removeDayModifier(modifier?: DayModifier | null): void;
    setInputFormat(format: string): void;
    setAllowInputAnyChar(value: boolean): void;
    setDaysOutOfMonthVisible(value: boolean): void;
    setFixedRowsCount(value: boolean): void;
    setToggleSelection(value: boolean): void;
    setShowDeselectButton(value: boolean): void;
    setAllowEmpty(value: boolean): void;
    setShowResetButton(value: boolean): void;
    setMonthAsDropdown(value: boolean): void;
    setYearAsDropdown(value: boolean): void;
    setBindSelectedDateWithMonth(value: boolean): void;
    setYearSelectedFromTableOfYears(value: boolean): void;
    setTableOfYearsRowsCount(count: number): void;
    setTableOfYearsAlign(align: Align | null): void;
    setTableOfYearsOnSwipeDown(value: boolean): void;
    setYearsOutOfTableOfYearsVisible(value: boolean): void;
    setMonthAndYearSeparated(value: boolean): void;
    setMonthShort(value: boolean): void;
    setChangeMonthOnSwipe(value: boolean): void;
    setAnimateMonthChange(value: boolean): void;
    setSlideAnimation(value: boolean): void;
    setClassesPrefix(prefix: string): void;
    setDarkMode(value: boolean): void;
    setShowCloseButton(value: boolean): void;
    setCloseOnEscPress(value: boolean): void;
    setTitle(title: string | null): void;
    setDropdownItemsLimit(limit: number): void;
    setHideDropdownWithOneItem(value: boolean): void;
    setGoBackHtml(html: string): void;
    setGoForwardHtml(html: string): void;
    setCloseHtml(html: string): void;
    setResetHtml(html: string): void;
    setDeselectHtml(html: string): void;
    setPosition(position: Position): void;
    setPositionFixing(value: boolean): void;
    setFullScreenOnMobile(value: boolean): void;
    setKeyboardOnMobile(value: boolean): void;
    setIncludeAria(value: boolean): void;
    setToday(date: Day | Date | string | null): void;
    onBeforeSelect(listener: SelectListener): void;
    offBeforeSelect(listener?: SelectListener | null): void;
    onSelect(listener: SelectListener): void;
    offSelect(listener?: SelectListener | null): void;
    onBeforeOpen(listener: OpenOrCloseListener): void;
    offBeforeOpen(listener?: OpenOrCloseListener | null): void;
    onOpen(listener: OpenOrCloseListener): void;
    offOpen(listener?: OpenOrCloseListener | null): void;
    onBeforeClose(listener: OpenOrCloseListener): void;
    offBeforeClose(listener?: OpenOrCloseListener | null): void;
    onClose(listener: OpenOrCloseListener): void;
    offClose(listener?: OpenOrCloseListener | null): void;
    onBeforeOpenAndClose(listener: OpenOrCloseListener): void;
    offBeforeOpenAndClose(listener?: OpenOrCloseListener | null): void;
    onOpenAndClose(listener: OpenOrCloseListener): void;
    offOpenAndClose(listener?: OpenOrCloseListener | null): void;
    onBeforeMonthChange(listener: MonthChangeListener): void;
    offBeforeMonthChange(listener?: MonthChangeListener | null): void;
    onMonthChange(listener: MonthChangeListener): void;
    offMonthChange(listener?: MonthChangeListener | null): void;
    onBeforeFocus(listener: FocusListener): void;
    offBeforeFocus(listener?: FocusListener | null): void;
    onFocus(listener: FocusListener): void;
    offFocus(listener?: FocusListener | null): void;
    getInitialMonth(): Date;
    isMonthInValidity(month: Date): boolean;
    correctMonth(month: Date): Date;
    getInitialDate(): Date | null;
    findPossibleAvailableDate(date: Date | null): Date | null;
    findNearestAvailableDate(date: Date): Date | null;
    calculateNearestAvailableDate_(date: Date, minDate?: Date | null, maxDate?: Date | null): Date | null;
    isDateInValidity(date: Date): boolean;
    private correctDate_;
    getFirstDayOfWeek(): DayOfWeek;
    areDaysOutOfMonthVisible(): boolean;
    hasFixedRowsCount(): boolean;
    hasToggleSelection(): boolean;
    isAllowedEmpty(): boolean;
    isDeselectButtonShown(): boolean;
    isResetButtonShown(): boolean;
    isMonthAsDropdown(): boolean;
    isYearAsDropdown(): boolean;
    isYearSelectedFromTableOfYears(): boolean;
    isSelectedDateBoundWithMonth(): boolean;
    getTableOfYearsRowsCount(): number;
    getTableOfYearsColumnsCount(): number;
    getTableOfYearsAlign(): Align | null;
    isTableOfYearsOnSwipeDownEnabled(): boolean;
    areYearsOutOfTableOfYearsVisible(): boolean;
    isMonthAndYearSeparated(): boolean;
    isMonthShort(): boolean;
    isMonthChangeOnSwipeEnabled(): boolean;
    isMonthChangeAnimated(): boolean;
    isSlideAnimationEnabled(): boolean;
    getClassesPrefix(): string;
    isDarkModeEnabled(): boolean;
    isCloseButtonShown(): boolean;
    isClosedOnEscPress(): boolean;
    getTitle(): string;
    getMinDate(): Date | null;
    getMaxDate(): Date | null;
    getMinDate_(): Date;
    getMaxDate_(): Date;
    getMinMonth(): Date | null;
    getMaxMonth(): Date | null;
    getMinMonth_(): Date;
    getMaxMonth_(): Date;
    isDropdownWithOneItemHidden(): boolean;
    getDropdownItemsLimit(): number;
    isDateAvailable(date: Date): boolean;
    getCellContent(day: Day): string;
    prefixClass_(name: string): string;
    getCellStructure_(): HTMLElement;
    updateCellStructure_(element: HTMLElement, day: Day): void;
    getHeaderStructure_(): HTMLElement | null;
    getFooterStructure_(): HTMLElement | null;
    getCellClasses(day: Day): string[];
    modifyDay(day: Day): void;
    getGoBackHtml(): string;
    getGoForwardHtml(): string;
    getCloseHtml(): string;
    getResetHtml(): string;
    getDeselectHtml(): string;
    isHiddenOnBlur(): boolean;
    isHiddenOnSelect(): boolean;
    getInputFormat(): string;
    isAllowedInputAnyChar(): boolean;
    getPosition(): Position;
    isPositionFixingEnabled(): boolean;
    isFullScreenOnMobile(): boolean;
    isKeyboardOnMobile(): boolean;
    isAriaIncluded(): boolean;
    getToday(): Date;
    getDateAvailabilityResolver(): DateAvailabilityResolver | null;
    getDateAvailabilityResolvers(): DateAvailabilityResolver[];
    getCellContentResolver(): CellContentResolver | null;
    getCellContentStructureResolver(): CellContentStructureResolver | null;
    getHeaderStructureResolver(): StructureResolverInit | null;
    getFooterStructureResolver(): StructureResolverInit | null;
    getCellClassesResolvers(): CellClassesResolver[];
    getDayModifiers(): DayModifier[];
    getBeforeSelectListeners(): SelectListener[];
    getSelectListeners(): SelectListener[];
    getBeforeOpenListeners(): OpenOrCloseListener[];
    getOpenListeners(): OpenOrCloseListener[];
    getBeforeCloseListeners(): OpenOrCloseListener[];
    getCloseListeners(): OpenOrCloseListener[];
    getBeforeOpenAndCloseListeners(): OpenOrCloseListener[];
    getOpenAndCloseListeners(): OpenOrCloseListener[];
    getBeforeMonthChangeListeners(): MonthChangeListener[];
    getMonthChangeListeners(): MonthChangeListener[];
    getBeforeFocusListeners(): FocusListener[];
    getFocusListeners(): FocusListener[];
    private checkConstraints_;
    private calculateMonthCorrection_;
    private calculateDateCorrection_;
    private removeCallback_;
    private onEvent_;
    private offEvent_;
    triggerEvent_(eventType: EventType_, caller: ListenerCaller): boolean;
}
export {};
